# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
# 1 "<built-in>"
# 1 "<command-line>"
# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
;****************************************************************
;
; Copyright (c) 2001 - 2003
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; EPI -  echo planar imaging method
;
;****************************************************************
;
; d0 - TR padding
; d1 - refocusing
; d2 - TE padding
; d3 = RampTime + InterGradientWaitTime
; d4 = RiseTime
; d5 = spoiler
; d7 - TE padding (spin echo)
; d8 = SCON / BLKTR_MAN (Amplifier preblanking)


# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include" 1
;****************************************************************
;
; Copyright (c) 2018-2021
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
;****************************************************************
# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl" 1
;Avance4.incl
;   for AV 4
;
;avance-version (16/08/18)
;
;$CLASS=Common Incl
;$COMMENT=


# 19 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"
;setrtp0 denotes TimingController


# 50 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"
# 51 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"


# 63 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"
# 89 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"
# 90 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"


# 123 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"
;#define LOWQ
;#define HIGHQ


;#define MIX_UP
;#define MIX_DOWN
# 136 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Avance.incl"
;$Id:$
# 15 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include" 2


define delay adcEndInfoTagDel
define delay rde1
# 20 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
"rde1=de-de1"


; Remark:  is the string concatenation mode for cpp with traditional option
# 27 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
	


	
subroutine InitGradients
subroutine InitDevices_NoGradients
subroutine InitDevices
subroutine UpdateDynPars_30s
subroutine SetupGoTo
subroutine AdcEnd_InfoTag
# 23 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg" 2

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 1
;****************************************************************
;
; Copyright (c) 2003-2007
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; Declaration of pulseprogram parameters and subroutines for 
; preparation  modules
;
; Must be included after MRI.include!
;
;****************************************************************

;**** Fat Suppression ****
# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/FatSup.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; FatSup.mod : Declaration of Fat Suppression Subroutine
;
;****************************************************************

if (PVM_FatSupPerform == Yes)
{
  define pulse           fatSupPul   = {$PVM_FatSupRfLength}
  define list<frequency> fatSupList  = {$PVM_FatSupFL}
  
  define delay fatSupRamp  = {$PVM_FatSupRampTime}
  define delay fatSupWait  = {$PVM_FatSupGradWait}
  define delay fatSupSpoil = {$PVM_FatSupSpoilDur}

  ; convert from ms to s
  "fatSupRamp  = fatSupRamp  / 1000"
  "fatSupWait  = fatSupWait  / 1000"
  "fatSupSpoil = fatSupSpoil / 1000"
}
subroutine FatSup
# 21 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Flow Saturation ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/FlowSat.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; FlowSat.mod: Declaration of subroutines for Flow Saturation 
; call
; subr FlowSat()
; subr FlowSatInit()
; subr FlowSatInc()
; 
;****************************************************************

if(PVM_InFlowSatOnOff == 1)
{
define list<frequency> modlis4 = {$PVM_InFlowSatFL}
define list<grad_scalar> flowSatGrad={$PVM_InFlowSatGrad}

define delay SfD0 = {$PVM_SfD0}
define delay SfD2 = {$PVM_SfD2}
# 27 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/FlowSat.mod"
define pulse SfP0 = {$PVM_SfP0}
define loopcounter SfLp0 = {$PVM_SfLp0}
}


subroutine FlowSat
subroutine FlowSatInc
subroutine FlowSatInit
# 25 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Saturation Transfer ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SatTrans.mod" 1
;****************************************************************
; $Source$
;
; Copyright (c) 2023
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; SatTrans.mod: Declaration of subroutine for Saturation transfer 
; call
; subr SatTrans()
;
; $Id$
;****************************************************************
;**** Saturation Transfer Module ****


; PVM_SatTransFL:        List of offset frequencies to be measured.
; PVM_SattransNPulses:   Number of pulses used in one saturation event
; PVM_SattransPowerList: List of RF amplitudes for saturation pulses.
;                        Two elements long: first element: 0 Watt,
;                        used for one reference scan. Subsequent scans
;                        use amplitude as specified in UI.
; StRepCntr:             If Reference Scan is 'On' two power switch cmds
;                        are required: before & after RefScan. Incrementing
;                        counter with repetitions and resetting it to zero
;                        when StReps is reached, this happens for cntr vals
;                        0 & 1.
# 32 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SatTrans.mod"
if(PVM_SatTransOnOff)
{
  define list<frequency> modlis5    = {$PVM_SatTransFL}
  define list<power> StRfPower      = {$PVM_SatTransPowerList}
             
  define delay StD0                 = {$PVM_StD0}
  define delay StD1                 = {$PVM_StD1}
  define delay StD2                 = {$PVM_StD2}
  define delay StD3                 = {$PVM_StD3}

  define pulse StP0                 = {$PVM_StP0}

  define loopcounter StNPulses      = {$PVM_SatTransNPulses}
  define loopcounter StReps         = {$PVM_SatTransRepetitions}
# 47 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SatTrans.mod"
  define loopcounter StRepCntr
  "StRepCntr = 0"
}

subroutine SatTransInit

subroutine SatTransInc
subroutine SatTrans
# 29 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;*** FOV Saturation ***

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/FovSat.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; FovSat.mod : Declaration of FOV Saturation subroutine
; call: subr FovSat()
;
;****************************************************************


if (PVM_FovSatOnOff == On)
{
  define pulse           fovSatPul   = {$PVM_FovSatRfLength}
  define list<frequency> fovSatList  = {$PVM_FovSatFL}
  
  define delay fovSatRamp  = {$PVM_FovSatRampTime}
  define delay fovSatWait  = {$PVM_FovSatGradWait}
  define delay fovSatSpoil = {$PVM_FovSatSpoilDur}
# 26 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/FovSat.mod"
  ; convert from ms to s
  "fovSatRamp  = fovSatRamp  / 1000"
  "fovSatWait  = fovSatWait  / 1000"
  "fovSatSpoil = fovSatSpoil / 1000"  
}

subroutine FovSat

# 33 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Black Blood ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/BlBlood.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; BlBlood.mod : Declaration of Black blood  subroutine
;
; call
; subr BlBlood(ph0) : Black blood preparation with RF phaselist
;                     ph0
;
;****************************************************************

if(PVM_BlBloodOnOff)
{
define list<frequency> modlis8 = {$PVM_BlBloodFL}
define delay BlbD0 = {$PVM_BlbD0}
define delay BlbD1 = {$PVM_BlbD1}
define delay BlbD2 = {$PVM_BlbD2}

define pulse BlbP0 = {$PVM_BlbP0}
}
subroutine BlBlood
# 37 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Trigger ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Trigger.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; Trigger.mod - Trigger Module
;
;****************************************************************

if (PVM_TriggerModule == On)
{
  define delay trigDur = {$PVM_TriggerDur}
  define delay trigDel = {$PVM_TriggerDelay}

  ; convert from ms to s
  "trigDur = trigDur / 1000"
  "trigDel = trigDel / 1000"
}
subroutine Trigger
subroutine TriggerPhase
subroutine TriggerSlice
# 41 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Trigger Out ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
; $Id$
;****************************************************************

if (PVM_TriggerOutOnOff == On)
{
  define delay trigOutDur = {$PVM_TriggerOutDur}
  define delay trigOutDel = {$PVM_TriggerOutDelay}

  ; convert from ms to s
  "trigOutDur = trigOutDur / 1000"
  "trigOutDel = trigOutDel / 1000"
}
subroutine TriggerOut
subroutine TriggerOutStart
subroutine TriggerOutSlice
subroutine TriggerOutVolume
# 45 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Outer Volume Suppression ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/WsOvs.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; WsOvs.mod: Declaration of water suppression and Outer 
;            volume suppression subroutines
;
; call 
; subr Ovs(ph0) ;  execution of OVS with ph0 phaselist
;
; subr WsOvs(ph0,ph1) : execution of OVS with ph0 and WS with ph1
;                       phaselist
;****************************************************************

;**** OuterVolumeSuppression ****

if(PVM_OvsOnOff == 1)
{
define list<frequency> Ovslist={$PVM_OvsFrequencyList}
define delay OvsD0 = {$PVM_OvsD0}
define delay OvsD1 = {$PVM_OvsD1}
define pulse OvsP0 = {$PVM_OvsP0}
}
subroutine Ovs
# 62 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/WsOvs.mod"
;*** WaterSuppression Module with OVS ****

if (PVM_WsMode)
{

define list<frequency> Wslist={$PVM_WsOffsetHz}
define pulse WsP0 = {$PVM_WsP0}
define pulse WsP1 = {$PVM_WsP1}
define pulse WsP2 = {$PVM_WsP2}
define delay WsNp0 
"WsNp0 = WsP0"
define delay WsNp1 
"WsNp1 = WsP1"
define delay WsNp2 
"WsNp2 = WsP2"
define list<delay> ChD1={$PVM_ChppgD1}
define list<delay> ChD2={$PVM_ChppgD2}
define list<delay> VpD1={$PVM_VpppgD1}
define list<delay> VpD2={$PVM_VpppgD2}
# 82 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/WsOvs.mod"
}


subroutine WsOvsMain
subroutine WsOvs
subroutine Ws
# 49 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Solvent Suppression module ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/WsSat.mod" 1
;******************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$ 
;
; All Rights Reserved
;
; WsSat.mod - Declaration of water suppression and FOV saturation 
;             subroutines
; call
; subr WsSat(ph0) : execution of WS with ph0 phaselist and 
;                   FOV saturation (as passed as argument)    
;      
;*******************************************************************


; Definitions for WsPpgParams are included in WsOvs.mod
subroutine WsSatMain
subroutine WsSat
# 53 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Selective Inversion Recovery ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SliceSelIr.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; SlicelSelIr.mod : declaration of slice Selective Inversion 
;                   Recovery subroutine
; call SliceSelIr()
; 
;
;****************************************************************


if(PVM_SelIrOnOff)
{
  define list<frequency> IrFL = {$PVM_SelIrFL} 
  define delay IrD0 = {$PVM_SelIrD0} ; PVM_InterInvDelay
  define delay IrD1 = {$PVM_SelIrD1} ; PVM_InterInvEndDelay[0]
  define delay IrD2 = {$PVM_SelIrD2} ; Spoiler duration
  define delay IrD4 = {$PVM_SelIrD4} ; risetime
# 27 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SliceSelIr.mod"
  define pulse IrP0 = {$PVM_SelIrP0}
  define loopcounter IrL0 = {$PVM_SelIrL0}
  define loopcounter IrL1
}

subroutine SliceSelIr

# 57 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Tagging ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Tagging.mod" 1
;****************************************************************
;
; Copyright (c) 2007
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; Tagging.mod : Declaration of tagging subroutine
; call
; subr Tagging()
;
;****************************************************************

if(PVM_TaggingOnOff)
{
define list<frequency> taggfreq={$PVM_TaggingFL}

define delay TaggD0 = {$PVM_TaggingD0}
define delay TaggD1 = {$PVM_TaggingD1}
define delay TaggD2 = {$PVM_TaggingD2}
define delay TaggD3 = {$PVM_TaggingD3}
define delay TaggD4 = {$PVM_TaggingD4}
# 27 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Tagging.mod"
define pulse TaggP0 = {$PVM_TaggingP0}
define loopcounter TaggL0 = {$PVM_TaggingLp0}
}

subroutine Tagging

# 61 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Noe ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Noe.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; Noe.mod: Declaration of Nuclear Overhouser Enhancement 
;             subroutine
; call
; subr Noe()
;
;****************************************************************

if(PVM_NoeOnOff == On)
{
define delay NoeD0 = {$PVM_NoeD0}
define delay NoeD1 = {$PVM_NoeD1}
}

subroutine Noe
# 65 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Evolution ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Evolution.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
;
; Evolution.mod - Evolution Module
;
;****************************************************************

if (PVM_EvolutionOnOff == On)
{
  define delay       evolDel  = {$PVM_EvolutionDelay}
  define list<delay> evolTime = {$PVM_EvolutionTime}
}

subroutine Evolution
# 69 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2

;**** Drift Compensation ****

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/DriftComp.mod" 1
;==========================================================
;   subroutine for drift compensation
;==========================================================


if (PVM_DriftCompNavOnOff == On)
{
  define list<frequency> tx_drift_fq = {$PVM_DriftCompNavTxFrq}
  define list<frequency> rx_drift_fq = {$PVM_DriftCompNavRxFrq}
  define pulse DCP0 = {$PVM_DriftCompNavP0}     
  define delay DCD1 = {$PVM_DriftCompNavD1}
  define delay DCD2 = {$PVM_DriftCompNavD2}
  define delay DCD3 = {$PVM_DriftCompNavD3}
  define delay DCD4 = {$PVM_DriftCompNavD4}
  define delay DCD5 = {$PVM_DriftCompNavD5}
  define delay DCD6
  "DCD6 = 20u - de"
  define list<phase> dcph = { 0 }
}
subroutine DriftComp
# 73 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/PrepModulesHead.mod" 2
# 24 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg" 2

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epiHead.mod" 1
;****************************************************************
;
; Copyright (c) 2003
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
; $Id$
; Declaration of pulseprogram parameters for epi module 
; 
;****************************************************************

define delay EpiD0 = {$PVM_EpiD0}
define delay EpiD1 = {$PVM_EpiD1}
define delay EpiD2 = {$PVM_EpiD2}
define delay EpiD3 = {$PVM_EpiD3}
define delay EpiD4 = {$PVM_EpiD4}
define delay EpiD5 = {$PVM_EpiD5}
define delay EpiD7 = {$PVM_EpiD7}
define delay EpiD8 = {$PVM_EpiD8}
define delay EpiD9 = {$PVM_EpiD9}
define delay EpiD10 = {$PVM_EpiD10}
define delay EpiD11 = {$PVM_EpiD11}
define delay EpiD12 = {$PVM_EpiD12}
define delay EpiD13 = {$PVM_EpiD13}
# 27 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epiHead.mod"
define list<grad_scalar> Interleaving={$PVM_EpiInterleavingFunction}

define delay Epi20u_de
"Epi20u_de = 20u - de" 

define list<delay> EpiVd = {$PVM_EpiVdList} 
define list < grad_scalar > mbBlipFactor = {$PVM_MbEpiBlipList}
define list < grad_scalar > mbPreBlipFactor = {$PVM_MbEpiSegList}
define list < grad_scalar > mbPostBlipFactor = {$PVM_MbEpiSegListP}
subroutine EpiGradSync
subroutine MbEpiBlipInit
subroutine MbEpiBlipRestore
subroutine MbEpiBlipSet
# 25 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg" 2

# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/DynamicShim.mod" 1
;****************************************************************
;
; Copyright (c) 2018
; Bruker BioSpin GmbH & Co. KG
; D-76275 Ettlingen, Germany
;
; $Id$
;
; All Rights Reserved
;
; DynamicShim.mod : Declaration of FOV Saturation subroutine
; call: subr FovSat()
;
;****************************************************************

if(PVM_DynamicShimEnable==Yes)
{
    ; specify a ramptime for dynamic shimming that enables a 200% step  
    define delay dsramp = {$PVM_DynamicShimRisetime}
    "dsramp = dsramp * 2e-3"
    ; specify a duration of a dynamic shim switching event
    define delay dshimdur =  {$PVM_DynamicShimEventDuration}
    "dshimdur = dshimdur *1e-3"
    define list <shim_vector> dynamicShim= {$PVM_DynamicShim}
}
subroutine DynamicShimApply
subroutine DynamicShimInc
subroutine DynamicShimRes
# 26 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg" 2

;counter of dummy scans
define loopcounter lds = {$PVM_DummyScans}

define list<frequency> freqRx = {$ACQ_O1B_list}
define list<frequency> freqTx = {$ACQ_O1_list}
subr InitDevices
;EXEC_begin InitDevices InitDevices()
# 75 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
 
    
;EXEC_begin InitGradients InitGradients()
# 60 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
 
    define list <grad_index> xyzb0 = {0 1 2 3}
    1m sync_grad 100
    10u ctrlgrad 0  
    1m shim_off  
 
;EXEC_end   InitGradients
# 77 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
    
;EXEC_begin InitDevices_NoGradients InitDevices_NoGradients()
# 69 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
 
    2u h2pulse       ;SEL_2H plus interleave_incr
 
;EXEC_end   InitDevices_NoGradients
# 78 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
 
;EXEC_end   InitDevices
# 35 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
# 39 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
if(PVM_EpiAdjustMode==2)
{
    define list <grad_scalar> ACQ_spatial_phase_2
}
else
{
    grad_zero_for_gs <ACQ_spatial_phase_2>
}
 
         0u  grad_matrix.res
             subr MbEpiBlipInit
;EXEC_begin MbEpiBlipInit MbEpiBlipInit()
# 48 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epiHead.mod"
 
    0u mbBlipFactor.res
    0u mbBlipFactor.store
    0u mbPreBlipFactor.res
    0u mbPreBlipFactor.store
    0u mbPostBlipFactor.res
    0u mbPostBlipFactor.store
   
;EXEC_end   MbEpiBlipInit
# 50 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr DynamicShimRes
;EXEC_begin DynamicShimRes DynamicShimRes()
# 45 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/DynamicShim.mod"
 
   if(PVM_DynamicShimEnable==Yes)
   {
      0u   dynamicShim.res
   }
 
;EXEC_end   DynamicShimRes
# 51 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr SatTransInit
;EXEC_begin SatTransInit SatTransInit()
# 52 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SatTrans.mod"
 
  if(PVM_SatTransOnOff)
  {
              0u    modlis5.res
              0u    StRfPower.res

              "StRepCntr = 0"
  }
 
;EXEC_end   SatTransInit
# 52 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr TriggerOutStart
;EXEC_begin TriggerOutStart TriggerOutStart()
# 31 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
 
  if (PVM_TriggerOutMode == AT_START)
  {
    
;EXEC_begin TriggerOut TriggerOut()
# 22 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
 
  if (PVM_TriggerOutOnOff == On)
  {
    trigOutDel    setrtp0|6
    trigOutDur    setrtp0^6
  }
 
;EXEC_end   TriggerOut
# 35 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
  }
 
;EXEC_end   TriggerOutStart
# 53 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"

start,   0u
             subr DriftComp
;EXEC_begin DriftComp DriftComp()
# 23 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/DriftComp.mod"
 

  if(PVM_DriftCompYesNo == Yes)
  {
        20u     switch_realtime_tables    ;close to nav acq
    

    if(PVM_DriftCompNavOnOff == On)
    {
        10u     switch_DriftCompensation

       	10u  	rx_drift_fq(receive):f1
      	 5u  	tx_drift_fq:f1

      (DCP0     :sp55 dcph):f1
 
       DCD6                                              ;is 20u - de
		(rde1 de1 adc_DriftCompensation   dcph syrec_DriftCompensation ) (1u 1u   dcph:r):f_DriftCompensation ;is de
       DCD1     dwgen_DriftCompensation
       169u                               ;delay for scan shift
        10u     eoscnpzbwrif_DriftCompensation

       DCD2     grad_ramp{PVM_DriftCompNavSpoilAmp,PVM_DriftCompNavSpoilAmp,PVM_DriftCompNavSpoilAmp}
       DCD3                               ; additional delay after ADC_END requires about 45u
       DCD4     switch_job0             ; requires about 65u
       DCD5
       DCD2     grad_off
    }
  }

 
;EXEC_end   DriftComp
# 56 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr TriggerPhase
;EXEC_begin TriggerPhase TriggerPhase()
# 33 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Trigger.mod"
 
  if (PVM_TriggerMode == per_PhaseStep)
  {
    
;EXEC_begin Trigger Trigger()
# 24 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Trigger.mod"
 
  if (PVM_TriggerModule == On)
  {
    trigDur     trignl1
    trigDel
  }
 
;EXEC_end   Trigger
# 37 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Trigger.mod"
  }
 
;EXEC_end   TriggerPhase
# 57 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr TriggerOutVolume
;EXEC_begin TriggerOutVolume TriggerOutVolume()
# 47 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
 
  if (PVM_TriggerOutMode == PER_VOLUME)
  {
    
;EXEC_begin TriggerOut TriggerOut()
# 22 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
 
  if (PVM_TriggerOutOnOff == On)
  {
    trigOutDel    setrtp0|6
    trigOutDur    setrtp0^6
  }
 
;EXEC_end   TriggerOut
# 51 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
  }
 
;EXEC_end   TriggerOutVolume
# 58 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr Tagging
;EXEC_begin Tagging Tagging()
# 32 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Tagging.mod"
 

  if(PVM_TaggingOnOff)
  {

                5u    taggfreq.res	

    if(PVM_TaggingMode == DANTE)
    {
                5u    taggfreq:f1  
            TaggD4    grad_ramp{PVM_TaggingGradAmp1, PVM_TaggingGradAmp2,0}
           (TaggP0:   sp45):f1

       tag118, TaggD2
            (TaggP0:   sp45):f1
       lo to tag118 times TaggL0

             TaggD4    grad_off

      if(PVM_TaggingDir == Tagging_grid)
      {
             TaggD1    
                 0u    taggfreq.inc
                10u    taggfreq:f1
             TaggD4    grad_ramp{PVM_TaggingGradAmp3,PVM_TaggingGradAmp4,0} 
            (TaggP0:   sp45):f1
	    
       tag219, TaggD2
            (TaggP0:   sp45):f1
       lo to tag219 times TaggL0

             TaggD4    grad_off
      }
    }


    if(PVM_TaggingMode == SPAMM)
    {		       
                 5u    taggfreq:f1
            (TaggP0:   sp45):f1

       tag320, TaggD2    grad_ramp{PVM_TaggingGradAmp1,PVM_TaggingGradAmp2,0}
             TaggD4    grad_off
            (TaggP0:   sp45):f1
       lo to tag320 times TaggL0

      if(PVM_TaggingDir == Tagging_grid)
      {
                 0u    taggfreq.inc
                10u    taggfreq:f1
            (TaggP0:   sp45):f1

       tag421, TaggD2    grad_ramp{PVM_TaggingGradAmp3,PVM_TaggingGradAmp4,0}
             TaggD4    grad_off
            (TaggP0:   sp45):f1
       lo to tag421 times TaggL0
      }
    }

                10u
             TaggD3    grad_ramp{PVM_TaggingSpoilAmp,0,0}
             TaggD4    grad_off
             TaggD0
  }
 
;EXEC_end   Tagging
# 59 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"

;--------------------- start of the main loop ----------------------
slice,       subr UpdateDynPars_30s
;EXEC_begin UpdateDynPars_30s UpdateDynPars_30s()
# 82 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
 
    29.8u switch_realtime_tables
     0.1u update_interactive_parameters
     0.1u blockrequest
 
;EXEC_end   UpdateDynPars_30s
# 62 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
         subr DynamicShimApply
;EXEC_begin DynamicShimApply DynamicShimApply()
# 29 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/DynamicShim.mod"
 
   if(PVM_DynamicShimEnable==Yes)
   {
      dshimdur shim_ramp<dsramp> { dynamicShim[] };
   }
 
;EXEC_end   DynamicShimApply
# 63 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
         5u       freqRx(receive):f1
         5u       freqRx.inc
             subr MbEpiBlipRestore
;EXEC_begin MbEpiBlipRestore MbEpiBlipRestore()
# 58 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epiHead.mod"
 
    0u mbPostBlipFactor.restore
    0u mbPreBlipFactor.restore
    0u mbBlipFactor.restore
    
;EXEC_end   MbEpiBlipRestore
# 67 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr TriggerSlice
;EXEC_begin TriggerSlice TriggerSlice()
# 41 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Trigger.mod"
 
  if (PVM_TriggerMode == per_Slice)
  {
    
;EXEC_begin Trigger Trigger()
# 24 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Trigger.mod"
 
  if (PVM_TriggerModule == On)
  {
    trigDur     trignl1
    trigDel
  }
 
;EXEC_end   Trigger
# 45 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/Trigger.mod"
  }
 
;EXEC_end   TriggerSlice
# 68 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
	     subr EpiGradSync
;EXEC_begin EpiGradSync EpiGradSync()
# 38 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epiHead.mod"
 
     if (PVM_EpiGradSync == Yes)
     {
	1u	trigpe3
        ;since trigger time point is undefined,
        ;1u can be neglected during timing calculation
     }
 
;EXEC_end   EpiGradSync
# 69 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr TriggerOutSlice
;EXEC_begin TriggerOutSlice TriggerOutSlice()
# 39 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
 
  if (PVM_TriggerOutMode == PER_SLICE)
  {
    
;EXEC_begin TriggerOut TriggerOut()
# 22 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
 
  if (PVM_TriggerOutOnOff == On)
  {
    trigOutDel    setrtp0|6
    trigOutDur    setrtp0^6
  }
 
;EXEC_end   TriggerOut
# 43 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/TriggerOut.mod"
  }
 
;EXEC_end   TriggerOutSlice
# 70 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
# 71 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
;----------------------- preparation modules -----------------------
             subr FovSat
;EXEC_begin FovSat FovSat()
# 33 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/FovSat.mod"
 
  if (PVM_FovSatOnOff == On)
  {
                 5u   PVM_FovSatGrad.res
                 5u   fovSatList.res

    fov22, fovSatRamp   grad_ramp<magnet_coord>{PVM_FovSatGrad[]} fovSatList:f1
         (fovSatPul   :sp41):f1
        fovSatSpoil   grad_ramp{0, 0, PVM_FovSatSpoilAmp}
                 0u   fovSatList.inc
                 0u   PVM_FovSatGrad.inc        
    lo to fov22 times PVM_FovSatNSlices
         
         fovSatRamp   grad_off
         fovSatWait
  }
 
;EXEC_end   FovSat
# 73 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr SatTrans
;EXEC_begin SatTrans SatTrans()
# 91 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SatTrans.mod"
 

  if(PVM_SatTransOnOff)
  {
             10u    StRfPower:f1
     pulse23, StD1    modlis5:f1
            StP0:   sp43(currentpower):f1

         lo to pulse23 times StNPulses

            StD2    grad_ramp{0, 0, PVM_SatTransSpoil.ampl}
            StD3    groff
  }

 
;EXEC_end   SatTrans
# 74 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
             subr FatSup
;EXEC_begin FatSup FatSup()
# 31 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/FatSup.mod"
 
  if (PVM_FatSupPerform == Yes)
  {
           10u       fatSupList:f1
    (fatSupPul       :sp40):f1
   fatSupSpoil       grad_shape {0, 0, PVM_FatSupSpoilAmp}
    fatSupRamp       grad_off
    fatSupWait
  }
 
;EXEC_end   FatSup
# 75 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"

         d5       grad_ramp{0, 0, g2}

;------------------------ slice selection --------------------------
         d4       grad_ramp{0, 0, g0}     freqTx:f1
# 81 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
        (p0:sp0   ph0):f1

         d3       grad_off                freqTx.inc

;-------------------------- slice rephase --------------------------
         d1      grad_ramp{0, 0, g1 }
         d4      grad_off
# 89 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
   if(PVM_SignalType == SignalType_Echo)
   {
         d7
         d9      grad_ramp{0, 0, g3}
         d4      grad_ramp{0, 0, g0}

        (p1:sp1  ph1):f1

         d9      grad_ramp{0, 0, g3}
         d4      grad_off
   }
# 101 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
;---------------------------- TE padding ---------------------------
         d2


# 1 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epi.mod" 1
;****************************************************************
;
; Copyright (c) 2002-2005
; Bruker BioSpin GmbH & Co. KG 
; D-76275 Ettlingen, Germany
;
; All Rights Reserved
; 
; epi.mod - an Echo-Planar Imaging module  
; 
;****************************************************************
# 13 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epi.mod"
;-------- version with shaped gradients:
if(PVM_EpiRampMode != SystemRamp)
{
	(rde1 de1 adc_job0   ph0 syrec_job0 ) (1u 1u   ph1:r):f_job0
        Epi20u_de
	if(PVM_EpiNShots != 1)
	{
	  if(PVM_EpiEchoTimeShifting == Yes)
	  {
		EpiVd	EpiVd.inc
	  }
	}

	if(PVM_EpiPrefixNavYes) ;prefix navigator
	{
		EpiD12 dwgen_job0
	}
        else
        {
		if(PVM_EpiDynCorr)
                {
		  EpiD12 dwgen_job0
                }
        }	
	if(PVM_EpiDynCorr)  ; dynamic ghost correction
	{
		EpiD13  grad_shape{EpiShape17() * 100, (0), (0)}
		EpiD5  grad_shape{EpiShape9() * 100, (0), (0)}
                EpiD11 grad_shape{EpiShape8() * 100, (0), (0)} ;plateau up		   
		EpiD5  grad_shape{EpiShape2()  * 100, EpiShape15() * 100, (0)} ;ramp down
		EpiD11 grad_shape{EpiShape13() * 100, 0, 0} ;plateau down
		EpiD5  grad_shape{EpiShape12() * 100, EpiShape16() * 100, (0)} ;ramp up
		EpiD11 grad_shape{EpiShape8()  * 100, (0), (0)} ;plateau up
		EpiD5  grad_shape{EpiShape10() * 100, (0), (0)}
		EpiD13  grad_shape{EpiShape17() * 100, (0) ,(0)} 
	}

	0u    gc_control
	{
                EpiD4 grad_shape < xyzb0 > {EpiShape1() * 100, EpiShape3() * 100 + EpiShape18() * 100 * r2d, (0) - EpiShape14() * 100 *  ACQ_spatial_phase_2, EpiShape1() * 100 * PVM_EpiReadOffsetHzFac}
                EpiD5 grad_shape < xyzb0 > {EpiShape9() * 100, EpiShape11() * 100 * Interleaving, MbEpiShape() * 100 * mbPreBlipFactor, EpiShape9() * 100 * PVM_EpiReadOffsetHzFac}
                EpiD11 grad_shape < xyzb0 > {EpiShape8() * 100, 0, 0, EpiShape8() * 100 * PVM_EpiReadOffsetHzFac}; plateau up
                loop PVM_EpiEchoCounter
                {
                EpiD5 grad_shape < xyzb0 > {EpiShape2() * 100, EpiShape4() * 100, MbEpiShape() * 100 * mbBlipFactor, EpiShape2() * 100 * PVM_EpiReadOffsetHzFac} ;ramp down
                EpiD11 grad_shape < xyzb0 > {EpiShape13() * 100, 0, 0, EpiShape13() * 100 * PVM_EpiReadOffsetHzFac}; plateau down
                0u mbBlipFactor.inc
                EpiD5 grad_shape < xyzb0 > {EpiShape12() * 100, EpiShape7() * 100, MbEpiShape() * 100 * mbBlipFactor, EpiShape12() * 100 * PVM_EpiReadOffsetHzFac} ;ramp up
                EpiD11 grad_shape < xyzb0 > {EpiShape8() * 100, 0, 0, EpiShape8() * 100 * PVM_EpiReadOffsetHzFac}; plateau up
                0u mbBlipFactor.inc
                }
                EpiD5 grad_shape < xyzb0 > {EpiShape10() * 100, -EpiShape11() * 100 * Interleaving, -MbEpiShape() * 100 * mbPostBlipFactor, EpiShape10() * 100 * PVM_EpiReadOffsetHzFac}
                EpiD4 grad_shape < xyzb0 > {EpiShape5() * 100, EpiShape6() * 100, EpiShape14() * 100 * ACQ_spatial_phase_2, EpiShape5() * 100 * PVM_EpiReadOffsetHzFac} 
	}
	EpiD1
	
        if(PVM_EpiPrefixNavYes) ;prefix navigator: adc is already running
	{
		EpiD2
	}
        else ;no prefix navigator or dyn corr: start adc now
	{
                if(PVM_EpiDynCorr)
                {
		  EpiD2
                }
                else
                {
		  EpiD2   dwgen_job0
                }
	}       
	EpiD3
        EpiD0   eoscnpzbwrif_job0
# 87 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epi.mod"
	if(PVM_EpiNShots != 1)
	{
	  if(PVM_EpiEchoTimeShifting == Yes)
	  {
		EpiVd	EpiVd.inc
	  }
	}
} ;--------end of version

;----------------------- version with system ramps  ---------------------------
if(PVM_EpiRampMode == SystemRamp)
{
	(rde1 de1 adc_job0   ph0 syrec_job0 ) (1u 1u   ph1:r):f_job0
        Epi20u_de
	if(PVM_EpiNShots != 1)
	{
	  if(PVM_EpiEchoTimeShifting == Yes)
	  {
		EpiVd	EpiVd.inc
	  }
	}

	if(PVM_EpiPrefixNavYes) ;prefix navigator
	{
		EpiD12 dwgen_job0
	}
# 114 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epi.mod"
        0u    gc_control
        {
            EpiD7 grad_ramp < xyzb0 > {PVM_EpiReadDephGrad * 100, PVM_EpiPhaseDephGrad * 100 + Interleaving * 100 * PVM_EpiPhaseEncGrad, 0, PVM_EpiReadDephGrad * 100 * PVM_EpiReadOffsetHzFac}
            EpiD8 grad_off < xyzb0 >
            EpiD9 grad_ramp < xyzb0 > {PVM_EpiReadEvenGrad * 100, 0, 0, PVM_EpiReadEvenGrad * 100 * PVM_EpiReadOffsetHzFac}
            loop PVM_EpiEchoCounter
            {
            EpiD10 grad_ramp < xyzb0 > {0, PVM_EpiBlipOddGrad * 100, 0, 0}
            EpiD9 grad_ramp < xyzb0 > {PVM_EpiReadOddGrad * 100, 0, 0, PVM_EpiReadOddGrad * 100 * PVM_EpiReadOffsetHzFac}
            EpiD10 grad_ramp < xyzb0 > {0, PVM_EpiBlipEvenGrad * 100, 0, 0}
            EpiD9 grad_ramp < xyzb0 > {PVM_EpiReadEvenGrad * 100, 0, 0, PVM_EpiReadEvenGrad * 100 * PVM_EpiReadOffsetHzFac}
            }
            EpiD8 grad_off < xyzb0 >
            EpiD7 grad_ramp < xyzb0 > {PVM_EpiReadDephGrad * 100, PVM_EpiPhaseRephGrad * 100 + Interleaving * 100 * PVM_EpiPhaseRewGrad, 0, PVM_EpiReadDephGrad * 100 * PVM_EpiReadOffsetHzFac} 	 
            grad_off < xyzb0 >
        }
	EpiD1
 	
        if(PVM_EpiPrefixNavYes) ;prefix navigator: adc is already running
	{
		EpiD2
	}
        if(!PVM_EpiPrefixNavYes) ;no prefix navigator: start adc now
	{
		EpiD2   dwgen_job0
	}       
	
        EpiD3
        EpiD0 eoscnpzbwrif_job0
	if(PVM_EpiNShots != 1)
	{
	  if(PVM_EpiEchoTimeShifting == Yes)
	  {
		EpiVd	EpiVd.inc
	  }
	} 
}	 
;-------- end of version

# 105 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg" 2

;---------------------------- slice loop ---------------------------         
         subr DynamicShimInc
;EXEC_begin DynamicShimInc DynamicShimInc()
# 37 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/DynamicShim.mod"
 
   if(PVM_DynamicShimEnable==Yes)
   {
      0u   dynamicShim.inc
   }
 
;EXEC_end   DynamicShimInc
# 108 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
# 109 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
         d0      grad_matrix.inc
 
      lo to slice times NSLICES/PVM_MbEncNBands
         0u      grad_matrix.res

         subr DynamicShimRes
;EXEC_begin DynamicShimRes DynamicShimRes()
# 45 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/DynamicShim.mod"
 
   if(PVM_DynamicShimEnable==Yes)
   {
      0u   dynamicShim.res
   }
 
;EXEC_end   DynamicShimRes
# 115 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
        
         d6                               ;inter-volume delay

;--------------------------- dummy loop ----------------------------
   "lds = lds - 1"
   if "lds >= 0"
   {
         0u       EpiVd.res
      goto start
   }
# 126 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
;-------------------------- averaging loop -------------------------
         0u      ipp0

     lo to start times NA

;----------------------------- 2d-loop -----------------------------
         0u      rpp0 Interleaving.inc
         subr MbEpiBlipSet
;EXEC_begin MbEpiBlipSet MbEpiBlipSet()
# 65 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epiHead.mod"
 
    0u mbBlipFactor.restore
mbBlip24, 0u
    0u mbBlipFactor.inc
    lo to mbBlip24 times PVM_MbEpiSegShift  
    0u mbBlipFactor.store
    
    0u mbPreBlipFactor.restore
    0u mbPreBlipFactor.inc
    0u mbPreBlipFactor.store
    
    0u mbPostBlipFactor.restore
    0u mbPostBlipFactor.inc
    0u mbPostBlipFactor.store    
    
;EXEC_end   MbEpiBlipSet
# 135 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
# 136 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
     lo to start times PVM_EpiNShots

;----------------------------------3d loop--------------------------
         0u       ACQ_spatial_phase_2.inc
         subr MbEpiBlipInit
;EXEC_begin MbEpiBlipInit MbEpiBlipInit()
# 48 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/epiHead.mod"
 
    0u mbBlipFactor.res
    0u mbBlipFactor.store
    0u mbPreBlipFactor.res
    0u mbPreBlipFactor.store
    0u mbPostBlipFactor.res
    0u mbPostBlipFactor.store
   
;EXEC_end   MbEpiBlipInit
# 141 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"

        lo to start times l2       ;PVM_EncMatrix[2]
         0u      Interleaving.res
# 145 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
;-------------------------- sattrans loop --------------------------
             subr SatTransInc
;EXEC_begin SatTransInc SatTransInc()
# 64 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/SatTrans.mod"
 

  if(PVM_SatTransOnOff)
  {
              0u    modlis5.inc

    if (PVM_SatTransRefScan)
    {
       "StRepCntr += 1"

       if "StRepCntr >= StReps"
       {
          "StRepCntr = 0"
       }

       if "{ StRepCntr == 0 } || { StRepCntr == 1 }"
       {
              0u    StRfPower.inc
       }

    }
  }

 
;EXEC_end   SatTransInc
# 147 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"

;------------------------- repetition loop -------------------------
     lo to start times NR

subr SetupGoTo
;EXEC_begin SetupGoTo SetupGoTo(any start)
# 90 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/MRI.include"
 
    if (ACQ_scan_type != Scan_Experiment)
    {
        goto start
    }
 
;EXEC_end   SetupGoTo
# 152 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
# 153 "/root/.topspin-BladeEpu/local_acqu/tuneDirs/20240725_090212_std_PV360_3_6_94T_protocols_1_1/13/lists/pp/EPI.ppg"
exit

ph0 = 0 2
ph1 = 0
